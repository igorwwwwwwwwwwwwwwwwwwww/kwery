#!/usr/bin/env ruby

$: << 'lib'

require 'kwery'
require 'optparse'
require 'json'

options = {}
opts = OptionParser.new do |opts|
  opts.banner = <<~HEREDOC
    Usage: bin/kwery <sql> [options]

  HEREDOC

  opts.on('', '--format=default|json|pretty', 'output format') do |v|
    options[:format] = v
  end

  opts.on('', '--stats', 'display runtime stats') do |_|
    options[:stats] = true
  end

  opts.on('', '--notablescan', 'disallow table scans (index scans only)') do |_|
    options[:notablescan] = true
  end
end
opts.parse!

sql = ARGV.shift

unless sql
  puts opts
  exit 1
end

log = Kwery::Log.new('data/wal')
# log.start_flush_thread

schema = Kwery::Schema.new(log: log)

schema.import_csv(:users, 'data/users.csv', { id: :integer, active: :boolean })
schema.create_index(:users, :users_idx_id, [
  Kwery::Expr::IndexedExpr.new(Kwery::Expr::Column.new(:id), :asc),
])

schema.import_json(:clickhouse_users, 'data/clickhouse_users.json')
schema.create_index(:clickhouse_users, :clickhouse_users_idx_id, [
  Kwery::Expr::IndexedExpr.new(Kwery::Expr::Column.new(:id), :asc),
])
schema.create_index(:clickhouse_users, :clickhouse_users_idx_guid, [
  Kwery::Expr::IndexedExpr.new(Kwery::Expr::Column.new(:guid), :asc),
])
schema.create_index(:clickhouse_users, :clickhouse_users_idx_name, [
  Kwery::Expr::IndexedExpr.new(Kwery::Expr::Column.new(:name), :asc),
])

# schema.recover

parser = Kwery::Parser.new(options)
query = parser.parse(sql, ENV['DEBUG_PARSER'] == 'true')

if ENV['DEBUG_QUERY'] == 'true'
  warn "query: #{query.inspect}"
end

plan = query.plan(schema)

context = Kwery::Executor::Context.new(schema)
plan.call(context).each do |tup|
  if tup.delete(:_pretty) && !options[:format]
    options[:format] = 'pretty'
  end

  options[:format] = 'default' unless options[:format]

  case options[:format]
  when 'json'
    puts JSON.dump(tup)
  when 'pretty'
    pp tup
  when 'default'
    puts tup
  else
    raise "invalid format #{options[:format]}"
  end
end

if options[:stats]
  warn ''
  warn "stats: #{context.stats}"
end
